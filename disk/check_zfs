#!/bin/bash

# Test ZFS pools for errors using thr zpool command
# inspired by https://calomel.org/zfs_health_check_script.html

while getopts 'hsp:' flag; do
  case "${flag}" in
    p) POOL="${OPTARG}" ;;
    h) HELP=1;;
    s) SUDO=1;;
  esac
done

if [ $HELP ] || [ -z "$POOL" ]; then
  echo "check_zfs [OPTIONS...]"
  echo "";
  echo "Checks zfs pools for any errors."
  echo "Debian needs to run as sudo. add the following to sudoers"
  echo "";
  echo "";
  echo "Flags:";
  echo "  -p    name of the pool to check"
  echo "  -s    Run as sudo"
  echo " "
  echo "Example"
  echo "./check_zfs -p zfs-pool-1"
  exit 3;
fi;

if ! hash zpool 2>/dev/null; then
  echo "zpool needs to be installed"
  exit 3;
fi

# run the command once. might need to be added to sudoers.
# include error messages into data.
if [ $SUDO ]; then
    OUTPUT=$(sudo zpool status $POOL 2>&1);
else
    OUTPUT=$(zpool status $POOL 2>&1);
fi;  
RESULT=$?

# output zfs status output to console.
echo "$OUTPUT" | sed '1q;d' | awk '{$1=$1};1'
echo "$OUTPUT" | sed '2q;d' | awk '{$1=$1};1'
echo "$OUTPUT" | sed '3q;d' | awk '{$1=$1};1'
echo "$OUTPUT" | tail -1 | awk '{$1=$1};1'

# Verify that this was a valid pool
if [ "$RESULT" -ne "0" ]; then
    exit 2;
fi;

# Verify if pools is degraded
CONDITION=$(echo "$OUTPUT" | egrep -i '(DEGRADED|FAULTED|OFFLINE|UNAVAIL|REMOVED|FAIL|DESTROYED|corrupt|cannot|unrecover)')
if [ "${CONDITION}" ]; then
    exit 2;
fi

# Check for any READ,WRITE,CKSUM issues
ERRORS=$(echo "$OUTPUT" | grep ONLINE | grep -v state | awk '{print $3 $4 $5}' | grep -v 000)
if [ "${ERRORS}" ]; then
    exit 1;
fi

exit 0;